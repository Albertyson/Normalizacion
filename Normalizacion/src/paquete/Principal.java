/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package paquete;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Alberto
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        jTabbedPane1.setLayout(new BorderLayout());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane10 = new javax.swing.JScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btnClearDeterminantes = new javax.swing.JButton();
        btnLimpiarDeterminados = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstDeterminados = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstDeterminantes = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        btnAddDeterminado = new javax.swing.JButton();
        btnAddDeterminante = new javax.swing.JButton();
        cmbDeterminantes = new javax.swing.JComboBox();
        cmbDeterminados = new javax.swing.JComboBox();
        btnAddAtributo = new javax.swing.JButton();
        txtAtributo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstAtributos = new javax.swing.JList();
        btnAgregarDF = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstDependencias = new javax.swing.JList();
        txtClave = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnClaves = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtNombreEsquema = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtNombreAtributo = new javax.swing.JTextField();
        txtEsquema = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstEsquemas = new javax.swing.JList();
        jLabel6 = new javax.swing.JLabel();
        btnNormalizar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtPK = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jLabel9 = new javax.swing.JLabel();
        btnAddAtr = new javax.swing.JButton();
        cmbAtr = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        cmbDeterminanteEsquema = new javax.swing.JComboBox();
        jScrollPane7 = new javax.swing.JScrollPane();
        lstDeterminanteEsquema = new javax.swing.JList();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        lstDeterminadoEsquema = new javax.swing.JList();
        cmbDeterminadoEsquema = new javax.swing.JComboBox();
        btnAddDeterminanteEsquema = new javax.swing.JButton();
        btnAddDeterminadoEsquema = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        lstDF = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(21, 217));

        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        btnClearDeterminantes.setText("Limpiar");
        btnClearDeterminantes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnClearDeterminantesMouseClicked(evt);
            }
        });

        btnLimpiarDeterminados.setText("Limpiar");
        btnLimpiarDeterminados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLimpiarDeterminadosMouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(lstDeterminados);

        jScrollPane1.setViewportView(lstDeterminantes);

        jLabel2.setText("Determina a ->");

        btnAddDeterminado.setText("Agregar");
        btnAddDeterminado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddDeterminadoMouseClicked(evt);
            }
        });

        btnAddDeterminante.setText("Agregar");
        btnAddDeterminante.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddDeterminanteMouseClicked(evt);
            }
        });

        btnAddAtributo.setText("Agregar a la relaci√≥n");
        btnAddAtributo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddAtributoMouseClicked(evt);
            }
        });

        txtAtributo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAtributoKeyPressed(evt);
            }
        });

        jLabel1.setText("Atributo");

        jScrollPane3.setViewportView(lstAtributos);

        btnAgregarDF.setText("Agregar Dependencia Funcional");
        btnAgregarDF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgregarDFMouseClicked(evt);
            }
        });

        jScrollPane4.setViewportView(lstDependencias);

        txtClave.setEnabled(false);

        jLabel3.setText("Clave Primaria");

        btnClaves.setText("Ver claves candidatas");
        btnClaves.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnClavesMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbDeterminantes, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAtributo, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnAddDeterminante)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClearDeterminantes))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddAtributo)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnLimpiarDeterminados)
                                    .addComponent(btnAddDeterminado)
                                    .addComponent(cmbDeterminados, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAgregarDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtClave))
                            .addComponent(btnClaves))))
                .addContainerGap(523, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAtributo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddAtributo)
                    .addComponent(jLabel1))
                .addGap(3, 3, 3)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbDeterminantes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbDeterminados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddDeterminante)
                    .addComponent(btnAddDeterminado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiarDeterminados))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClearDeterminantes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAgregarDF)
                            .addComponent(btnClaves))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Parte 1", jPanel1);

        jPanel2.setPreferredSize(new java.awt.Dimension(655, 541));

        jLabel4.setText("Nombre del esquema relacional");

        jButton2.setText("Agregar Esquema");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jLabel5.setText("Atributo");

        txtNombreAtributo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNombreAtributoKeyPressed(evt);
            }
        });

        txtEsquema.setEnabled(false);

        jScrollPane5.setViewportView(lstEsquemas);

        jLabel6.setText("Esquemas relacionales sin normalizar");

        btnNormalizar.setText("Normalizar");
        btnNormalizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNormalizarMouseClicked(evt);
            }
        });

        jLabel7.setText("Esquema relacional");

        jLabel8.setText("Clave primaria");

        jScrollPane6.setViewportView(jEditorPane1);

        jLabel9.setText("Esquemas relacionales normalizados");

        btnAddAtr.setText("Agregar Atributo");
        btnAddAtr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddAtrMouseClicked(evt);
            }
        });

        jButton1.setText("Agrega a clave primaria");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jScrollPane7.setViewportView(lstDeterminanteEsquema);

        jLabel10.setText("Determina a ");

        jScrollPane8.setViewportView(lstDeterminadoEsquema);

        btnAddDeterminanteEsquema.setText("Agregar");
        btnAddDeterminanteEsquema.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddDeterminanteEsquemaMouseClicked(evt);
            }
        });

        btnAddDeterminadoEsquema.setText("Agregar");
        btnAddDeterminadoEsquema.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddDeterminadoEsquemaMouseClicked(evt);
            }
        });

        jButton3.setText("Agregar DF");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jScrollPane9.setViewportView(lstDF);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(94, 94, 94)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel8)
                                .addComponent(jLabel7)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel9)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNombreAtributo, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                    .addComponent(txtNombreEsquema))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddAtr))
                            .addComponent(txtPK, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cmbAtr, javax.swing.GroupLayout.Alignment.LEADING, 0, 151, Short.MAX_VALUE)
                                    .addComponent(txtEsquema, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addComponent(jButton2))))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnAddDeterminanteEsquema, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbDeterminanteEsquema, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAddDeterminadoEsquema, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbDeterminadoEsquema, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(75, 75, 75)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(jButton3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNormalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(143, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNombreEsquema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbDeterminanteEsquema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbDeterminadoEsquema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txtNombreAtributo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddAtr))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(btnAddDeterminanteEsquema)
                        .addComponent(btnAddDeterminadoEsquema)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(cmbAtr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton2)
                                    .addComponent(txtEsquema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)
                                    .addComponent(btnNormalizar))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(157, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("Parte 2", jPanel2);

        jScrollPane10.setViewportView(jTabbedPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane10)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClavesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClavesMouseClicked
        // TODO add your handling code here:
        claves();
        /*HashSet<String> claveCandidata = new HashSet();
         HashSet<String> values = new HashSet();
         //Agregarle a la superclave todas las keys
         Set set = m.entrySet();
         Iterator it = set.iterator();
         int cont = 0;
         while (it.hasNext()) {
         Map.Entry entry = (Map.Entry) it.next();
         //Si es el primer elemento
         if (cont == 0) {
         claveCandidata.addAll((HashSet) entry.getKey());
         //Agregar la clave misma
         values.addAll(claveCandidata);
         //Agregar el valor actual
         values.addAll((HashSet) entry.getValue());
         System.out.println("");
         } else {
         //Si el determinante actual est√° contenido en values
         //agregar a values los atributos que no estan contenidos
         for (int i = 0; i < ((HashSet) entry.getKey()).toArray().length; i++) {
         if (!values.contains((String) ((HashSet) entry.getKey()).toArray()[i])) {
         System.out.println("1. " + values + "No contiene" + ((HashSet) entry.getKey()).toArray()[i]);
         claveCandidata.add((String) ((HashSet) entry.getKey()).toArray()[i]);
         if (i == ((HashSet) entry.getKey()).toArray().length - 1) {
         System.out.println("Agrega a values" + entry.getKey());
         values.addAll((HashSet) entry.getKey());
         }
         for (int j = 0; j < ((HashSet) entry.getValue()).toArray().length; j++) {
         if (claveCandidata.contains((String) ((HashSet) entry.getValue()).toArray()[j])) {
         claveCandidata.remove((String) ((HashSet) entry.getValue()).toArray()[j]);
         System.out.println("ELIMINA1");
         } else {
         values.addAll((HashSet) entry.getValue());
         }
         }
         } else {
         //Si values contiene la clave actual
         //Si values contiene todos los valores
         if (values.containsAll((HashSet) entry.getValue())) {
         //Si contiene todo el key
         if (values.containsAll((HashSet) entry.getKey())) {
         //Hay un ciclo
         //si no hay mas DF entonces volver a correr el algoritmo desde otro inicio
         //el algoritmo se debe dejar de correr hasta que vuelva a encontrar una clave que ya hab√≠a encontrado
         } else {
         if (((HashSet) entry.getKey()).size() == 1) {
         for (int j = 0; j < ((HashSet) entry.getValue()).toArray().length; j++) {
         if (claveCandidata.contains((String) ((HashSet) entry.getValue()).toArray()[j])) {
         claveCandidata.remove((String) ((HashSet) entry.getValue()).toArray()[j]);
         System.out.println("ELIMINA2");
         } else {
         values.addAll((HashSet) entry.getValue());
         }
         }
         }
         }
         } else {
         System.out.println(values + "No contiene" + entry.getValue());
         for (int j = 0; j < ((HashSet) entry.getValue()).toArray().length; j++) {
         if (claveCandidata.contains((String) ((HashSet) entry.getValue()).toArray()[j])) {
         claveCandidata.remove((String) ((HashSet) entry.getValue()).toArray()[j]);
         System.out.println("ELIMINA3");
         } else {

         values.addAll((HashSet) entry.getValue());
         }
         }
         }
         }
         }
         }
         System.out.println("CONT=" + cont);
         System.out.println("clavecandidata");
         for (int i = 0; i < claveCandidata.size(); i++) {
         System.out.print(claveCandidata.toArray()[i] + " ");
         }
         System.out.println("determina a");
         for (int i = 0; i < values.size(); i++) {
         System.out.print(values.toArray()[i] + " ");
         }
         System.out.println("\n\n");
         cont++;
         }
         System.out.println("Resultado final");
         for (int i = 0; i < claveCandidata.size(); i++) {
         System.out.println(claveCandidata.toArray()[i]);
         }*//*
         HashSet<HashSet> claves = new HashSet();
         claves = ClavesCandidatas(0, claves);
         System.out.println("DESPUES DEL METODO");
         for (int i = 0; i < claves.size(); i++) {
         System.out.println(claves.toArray()[i]);
         }*/
    }//GEN-LAST:event_btnClavesMouseClicked

    private void btnAgregarDFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarDFMouseClicked
        // TODO add your handling code here:
        if (lstDeterminantes.getModel().getSize() > 0 && lstDeterminantes.getModel().getSize() > 0) {

            HashSet<String> determinante = new HashSet();
            HashSet<String> determinado = new HashSet();
            String p = "", h = "";
            for (int i = 0; i < lstDeterminantes.getModel().getSize(); i++) {
                for (int j = 0; j < atributos.size(); j++) {
                    if (lstDeterminantes.getModel().getElementAt(i).equals(atributos.get(j))) {
                        determinante.add(atributos.get(j));
                    }
                }
            }
            for (int i = 0; i < lstDeterminados.getModel().getSize(); i++) {
                for (int j = 0; j < atributos.size(); j++) {
                    if (lstDeterminados.getModel().getElementAt(i).equals(atributos.get(j))) {
                        determinado.add(atributos.get(j));
                    }
                }
            }
            //Si la key ya existe entonces agregar "determinado" al valor de esa key
            if (!determinante.equals(determinado)) {

                if (m.containsKey(determinante)) {
                    HashSet<String> temp = m.get(determinante);
                    temp.addAll(determinado);
                    m.put(determinante, temp);
                } //Si la key no existe
                else {
                    m.put(determinante, determinado);
                }
            }
            //Llenar el JList
            DefaultListModel modelo = new DefaultListModel();
            Set set = m.entrySet();
            Iterator it = set.iterator();
            while (it.hasNext()) {
                Map.Entry entry = (Map.Entry) it.next();
                modelo.addElement(entry.getKey() + "‚Üí" + entry.getValue());
            }
            lstDependencias.setModel(modelo);
            lstDeterminantes.setModel(new DefaultListModel());
            lstDeterminados.setModel(new DefaultListModel());

        }
    }//GEN-LAST:event_btnAgregarDFMouseClicked

    private void txtAtributoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAtributoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10) {
            addAtributo();
        }
    }//GEN-LAST:event_txtAtributoKeyPressed

    private void btnAddAtributoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddAtributoMouseClicked
        // TODO add your handling code here
        addAtributo();
    }//GEN-LAST:event_btnAddAtributoMouseClicked

    private void btnAddDeterminanteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddDeterminanteMouseClicked
        // TODO add your handling code here:
        if (cmbDeterminantes.getModel().getSize() > 0) {
            boolean existe = false;
            DefaultListModel modelo = new DefaultListModel();
            for (int i = 0; i < lstDeterminantes.getModel().getSize(); i++) {
                if (lstDeterminantes.getModel().getElementAt(i).equals(cmbDeterminantes.getSelectedItem())) {
                    existe = true;
                }
                modelo.addElement(lstDeterminantes.getModel().getElementAt(i));
            }
            if (!existe) {
                ((DefaultListModel) modelo).addElement(cmbDeterminantes.getSelectedItem());
                lstDeterminantes.setModel(modelo);
            }
        }
    }//GEN-LAST:event_btnAddDeterminanteMouseClicked

    private void btnAddDeterminadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddDeterminadoMouseClicked
        // TODO add your handling code here:
        if (cmbDeterminados.getModel().getSize() > 0) {
            boolean existe = false;
            DefaultListModel modelo = new DefaultListModel();
            for (int i = 0; i < lstDeterminados.getModel().getSize(); i++) {
                if (lstDeterminados.getModel().getElementAt(i).equals(cmbDeterminados.getSelectedItem())) {
                    existe = true;
                }
                modelo.addElement(lstDeterminados.getModel().getElementAt(i));
            }
            if (!existe) {
                ((DefaultListModel) modelo).addElement(cmbDeterminados.getSelectedItem());
                lstDeterminados.setModel(modelo);
            }
        }
    }//GEN-LAST:event_btnAddDeterminadoMouseClicked

    private void btnLimpiarDeterminadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLimpiarDeterminadosMouseClicked
        // TODO add your handling code here:
        DefaultListModel modelo = new DefaultListModel();
        lstDeterminados.setModel(modelo);
    }//GEN-LAST:event_btnLimpiarDeterminadosMouseClicked

    private void btnClearDeterminantesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearDeterminantesMouseClicked
        // TODO add your handling code here:
        DefaultListModel modelo = new DefaultListModel();
        lstDeterminantes.setModel(modelo);
    }//GEN-LAST:event_btnClearDeterminantesMouseClicked

    private void txtNombreAtributoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreAtributoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10) {
            addAtributoEsquema();
        }
    }//GEN-LAST:event_txtNombreAtributoKeyPressed

    private void btnAddAtrMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddAtrMouseClicked
        // TODO add your handling code here:
        addAtributoEsquema();
    }//GEN-LAST:event_btnAddAtrMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        pkActual.add(cmbAtr.getSelectedItem().toString());
        txtPK.setText(pkActual.toString());
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        if (!(DFactual.isEmpty() || txtEsquema.getText().isEmpty() || txtPK.getText().isEmpty())) {
            Hashtable<HashSet, HashSet> tabla = new Hashtable();
            atributosEsquema.removeAll(pkActual);
            //tabla.put(pkActual, atributosEsquema);
            esquemas.add(new Esquema(pkActual, atributosEsquema, DFactual, "", txtNombreEsquema.getText()));
            DefaultListModel modelo = new DefaultListModel();
            for (int i = 0; i < lstEsquemas.getModel().getSize(); i++) {
                modelo.addElement(lstEsquemas.getModel().getElementAt(i));
            }
            modelo.addElement(new Esquema(pkActual, atributosEsquema, DFactual, "", txtNombreEsquema.getText()));
            lstEsquemas.setModel(modelo);
            atributosEsquema = new HashSet();
            pkActual = new HashSet();
            txtPK.setText("");
            txtEsquema.setText("");
            txtNombreEsquema.setText("");
            cmbAtr.setModel(new DefaultComboBoxModel());
            cmbDeterminanteEsquema.setModel(new DefaultComboBoxModel());
            cmbDeterminadoEsquema.setModel(new DefaultComboBoxModel());
            lstDeterminanteEsquema.setModel(new DefaultListModel());
            lstDeterminadoEsquema.setModel(new DefaultListModel());
            lstDF.setModel(new DefaultListModel());
            DFactual=new Hashtable();
        } else if (DFactual.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No ha agregado dependencias funcionales", "Aviso", 2);
        } else if (txtEsquema.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El esquema Relacional no tiene atributos", "Aviso", 2);
        } else if (txtPK.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No ha agregado una clave primaria", "Aviso", 2);
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void btnAddDeterminanteEsquemaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddDeterminanteEsquemaMouseClicked
        // TODO add your handling code here:
        if (cmbDeterminanteEsquema.getModel().getSize() > 0) {
            boolean existe = false;
            DefaultListModel modelo = new DefaultListModel();
            for (int i = 0; i < lstDeterminanteEsquema.getModel().getSize(); i++) {
                if (lstDeterminanteEsquema.getModel().getElementAt(i).equals(cmbDeterminanteEsquema.getSelectedItem())) {
                    existe = true;
                }
                modelo.addElement(lstDeterminanteEsquema.getModel().getElementAt(i));
            }
            if (!existe) {
                ((DefaultListModel) modelo).addElement(cmbDeterminanteEsquema.getSelectedItem());
                lstDeterminanteEsquema.setModel(modelo);
            }
        }
    }//GEN-LAST:event_btnAddDeterminanteEsquemaMouseClicked

    private void btnAddDeterminadoEsquemaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddDeterminadoEsquemaMouseClicked
        // TODO add your handling code here:
        if (cmbDeterminadoEsquema.getModel().getSize() > 0) {
            boolean existe = false;
            DefaultListModel modelo = new DefaultListModel();
            for (int i = 0; i < lstDeterminadoEsquema.getModel().getSize(); i++) {
                if (lstDeterminadoEsquema.getModel().getElementAt(i).equals(cmbDeterminadoEsquema.getSelectedItem())) {
                    existe = true;
                }
                modelo.addElement(lstDeterminadoEsquema.getModel().getElementAt(i));
            }
            if (!existe) {
                ((DefaultListModel) modelo).addElement(cmbDeterminadoEsquema.getSelectedItem());
                lstDeterminadoEsquema.setModel(modelo);
            }
        }
    }//GEN-LAST:event_btnAddDeterminadoEsquemaMouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        if (lstDeterminanteEsquema.getModel().getSize() > 0 && lstDeterminanteEsquema.getModel().getSize() > 0) {
            HashSet<String> determinante = new HashSet();
            HashSet<String> determinado = new HashSet();
            String p = "", h = "";
            for (int i = 0; i < lstDeterminanteEsquema.getModel().getSize(); i++) {
                determinante.add(lstDeterminanteEsquema.getModel().getElementAt(i).toString());
            }
            for (int i = 0; i < lstDeterminadoEsquema.getModel().getSize(); i++) {
                determinado.add(lstDeterminadoEsquema.getModel().getElementAt(i).toString());
            }
            //Si la key ya existe entonces agregar "determinado" al valor de esa key
            if (!determinante.equals(determinado)) {

                if (DFactual.containsKey(determinante)) {
                    HashSet<String> temp = DFactual.get(determinante);
                    temp.addAll(determinado);
                    DFactual.put(determinante, temp);
                } //Si la key no existe
                else {
                    DFactual.put(determinante, determinado);
                }
            }
            //Llenar el JList
            DefaultListModel modelo = new DefaultListModel();
            Set set = DFactual.entrySet();
            Iterator it = set.iterator();
            while (it.hasNext()) {
                Map.Entry entry = (Map.Entry) it.next();
                modelo.addElement(entry.getKey() + "‚Üí" + entry.getValue());
            }
            lstDF.setModel(modelo);
            lstDeterminanteEsquema.setModel(new DefaultListModel());
            lstDeterminadoEsquema.setModel(new DefaultListModel());
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void btnNormalizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNormalizarMouseClicked
        // TODO add your handling code here:
        if (lstEsquemas.getModel().getSize() > 0) {
            HashSet<Esquema> fn2 = FN2((Esquema) lstEsquemas.getSelectedValue());
            System.out.println("2FN:");
            for (int i = 0; i < fn2.toArray().length; i++) {
                System.out.println(fn2.toArray()[i]);
            }
        }
    }//GEN-LAST:event_btnNormalizarMouseClicked

    private void actualizarComboBox() {
        DefaultListModel mod = new DefaultListModel();
        DefaultComboBoxModel modelo = new DefaultComboBoxModel();
        DefaultComboBoxModel modelo1 = new DefaultComboBoxModel();
        for (int i = 0; i < atributos.size(); i++) {
            modelo.addElement(atributos.get(i));
            modelo1.addElement(atributos.get(i));
            mod.addElement(atributos.get(i));
        }
        cmbDeterminantes.setModel(modelo);
        cmbDeterminados.setModel(modelo1);
        lstAtributos.setModel(mod);
    }

    private void addAtributo() {
        if (!txtAtributo.getText().isEmpty()) {
            boolean existe = false;
            existe = false;
            String nombre = txtAtributo.getText();
            for (int i = 0; i < atributos.size(); i++) {
                if (atributos.get(i).equals(nombre)) {
                    JOptionPane.showMessageDialog(null, "El atributo ya existe, ingrese otro nombre...");
                    txtAtributo.setText("");
                    existe = true;
                    break;
                }
            }
            if (!existe) {
                atributos.add(nombre);
                actualizarComboBox();
                txtAtributo.setText("");
            }
        }
    }

    private HashSet<Esquema> FN2(Esquema e) {
        //Opcion 1
        //descomponer la clave primaria en todas las posibles combinaciones que tiene
        //buscar cada combinacion en las dependencias funcionales para ver que determinan
        //Si determina algo, agregar a "relaciones" un nuevo esquema que tenga como llave la 
        //combinacion y como atributos a lo que determina

        //Opcion 2
        //Para cada dependencia funcional
        //buscar el determinante de la dependencia funcional en la clave primaria
        //Si lo encuentra, agregar a "relaciones" un nuevo esquema que tenga como llave el 
        //determinante de la DF y como atributos a lo que determina
        HashSet<Esquema> relaciones = new HashSet();
        boolean encontro = false;
        Set set = e.getDF().entrySet();
        Esquema temp = e;
        Iterator it = set.iterator();
        int cont = 0;
        System.out.println("PK:" + e.getPK());
        System.out.println("temp antes " + temp);
        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry) it.next();
            System.out.println("Buscando " + (HashSet) entry.getKey() + " en " + e.getPK());
            if (e.getPK().containsAll((HashSet) entry.getKey())) {
                System.out.println("Encontr√≥");
                if (((HashSet) entry.getKey()).containsAll(e.getPK())) {
                    System.out.println("******");
                    encontro = true;
                    //relaciones.add(new Esquema((HashSet) entry.getKey(), (HashSet) entry.getValue(), e.getDF(), "2FN", e.getNombre() + "" + relaciones.size()));
                } else {
                    temp.getAtributos().removeAll((HashSet) entry.getKey());
                    temp.getAtributos().removeAll((HashSet) entry.getValue());
                    HashSet<String> atrs=new HashSet();
                    for (int i = 0; i < ((HashSet)entry.getValue()).toArray().length; i++) {
                        atrs.add((String)((HashSet)entry.getValue()).toArray()[i]);
                        atrs.addAll(aquedetermina(e.getDF(),(String)((HashSet)entry.getValue()).toArray()[i]));
                    }
                    relaciones.add(new Esquema((HashSet) entry.getKey(), atrs, e.getDF(), "2FN", e.getNombre() + "" + relaciones.size()));
                }
            }

        }
        System.out.println("temp despues" + temp);
        if (encontro) {
            relaciones.add(temp);
        }
        //Comparar relacion con relacion de el HashSet de Esquemas relaciones
        for (int i = 0; i < relaciones.size(); i++) {
            for (int j = 0; j < relaciones.size(); j++) {
                if(relaciones.toArray()[i].equals(relaciones.toArray()[j])){
                }else{
                    //Si una llave contiene toda la otra llave
                    if(((Esquema)relaciones.toArray()[i]).getPK().containsAll(((Esquema)relaciones.toArray()[j]).getPK())){
                        //eliminarle a la llave padre los atributos de la llave hija
                        System.out.println(((Esquema)relaciones.toArray()[i]).getPK()+ " contiene a " +((Esquema)relaciones.toArray()[j]).getPK());
                        System.out.println("antes ten√≠a"+((Esquema)relaciones.toArray()[i]).getAtributos());
                        ((Esquema)relaciones.toArray()[i]).getAtributos().removeAll(((Esquema)relaciones.toArray()[j]).getAtributos());
                        System.out.println("ahora tiene"+((Esquema)relaciones.toArray()[i]).getAtributos());
                    }
                }
            }
        }
        
        return relaciones;
    }

    public HashSet<String> aquedetermina(Hashtable<HashSet, HashSet> DF, String determinante) {
        Set set = DF.entrySet();
        Iterator it = set.iterator();
        HashSet<String> determinados=new HashSet();
        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry) it.next();
            if(((HashSet)entry.getKey()).contains(determinante)){
                determinados.addAll((HashSet)entry.getValue());
            }
        }
        return determinados;
    }

    private HashSet<Esquema> FN3(HashSet<Esquema> e, Hashtable<HashSet, HashSet> DF) {
        //Opcion 1
        //Para cada relacion descomponer los atributos que son determinados
        //Buscar los atributos que son determinados para ver si determinan algo en las dependencias funcionales

        //Opcion 2
        //Para cada dependencia funcional
        //Buscar en lo determinado de las relaciones los determinantes de cada dependencia funcional
        HashSet<Esquema> relaciones = new HashSet();
        return relaciones;
    }

    private void addAtributoEsquema() {
        boolean found = false;
        for (int i = 0; i < atributosEsquema.size(); i++) {
            if (atributosEsquema.toArray()[i].equals(txtNombreAtributo.getText())) {
                found = true;
            }
        }
        if (found) {
            txtNombreAtributo.setText("");
        } else {
            if (!txtNombreAtributo.getText().replaceAll(" ", "").isEmpty()) {
                atributosEsquema.add(txtNombreAtributo.getText());
                DefaultComboBoxModel modelo = new DefaultComboBoxModel();
                DefaultComboBoxModel modelo2 = new DefaultComboBoxModel();
                DefaultComboBoxModel modelo3 = new DefaultComboBoxModel();
                for (int i = 0; i < atributosEsquema.size(); i++) {
                    modelo.addElement((String) atributosEsquema.toArray()[i]);
                    modelo2.addElement((String) atributosEsquema.toArray()[i]);
                    modelo3.addElement((String) atributosEsquema.toArray()[i]);
                }
                cmbAtr.setModel(modelo);
                cmbDeterminanteEsquema.setModel(modelo2);
                cmbDeterminadoEsquema.setModel(modelo3);
                if (txtEsquema.getText().isEmpty()) {
                    if (txtNombreEsquema.getText().isEmpty()) {
                        txtEsquema.setText("{" + txtNombreAtributo.getText() + "}");
                    } else {
                        txtEsquema.setText(txtNombreEsquema.getText() + "{" + txtNombreAtributo.getText() + "}");
                    }

                } else {
                    String[] valores = txtEsquema.getText().split("[{]");
                    valores = valores[1].split("}");
                    txtEsquema.setText(txtNombreEsquema.getText() + "{" + valores[0] + "," + txtNombreAtributo.getText() + "}");
                }
                txtNombreAtributo.setText("");
            }
        }
    }

    private void claves() {
        HashSet<HashSet> ccs = new HashSet();
        HashSet<String> claveCandidata = new HashSet();
        HashSet<String> values = new HashSet();
        //Agregarle a la superclave todas las keys
        Set set = m.entrySet();
        Iterator it = set.iterator();
        int cont = 0;
        while (it.hasNext()) {
            Map.Entry entry = (Map.Entry) it.next();
            //Si es el primer elemento
            if (cont == 0) {
                claveCandidata.addAll((HashSet) entry.getKey());
                //Agregar la clave misma
                values.addAll(claveCandidata);
                //Agregar el valor actual
                values.addAll((HashSet) entry.getValue());
            } else {
                if (claveCandidata.containsAll((HashSet) entry.getKey())) {
                    if (values.containsAll((HashSet) entry.getValue())) {
                        for (int i = 0; i < claveCandidata.toArray().length; i++) {
                            if (((HashSet) entry.getValue()).contains(claveCandidata.toArray()[i])) {
                                //Ciclo
                                System.out.println("Hay ciclo caso 1");
                                continue;
                            }
                        }
                    } else {
                        for (int i = 0; i < ((HashSet) entry.getValue()).toArray().length; i++) {
                            if (!values.contains((String) ((HashSet) entry.getValue()).toArray()[i])) {
                                values.add((String) ((HashSet) entry.getValue()).toArray()[i]);
                            }
                        }
                    }
                } else {
                    if (values.containsAll((HashSet) entry.getKey())) {
                        if (((HashSet) entry.getValue()).containsAll(claveCandidata)) {
                            System.out.println("----------------");
                            System.out.println("Ciclo en " + claveCandidata + " -x- " + entry.getKey());
                            System.out.println("Values: " + values);
                            System.out.println("entry.getValue(): " + entry.getValue() + "--------------------\n");
                            HashSet<String> temp = new HashSet();
                            temp.addAll(claveCandidata);
                            temp.removeAll((HashSet) entry.getValue());
                            temp.addAll((HashSet) entry.getKey());
                            ccs.add(temp);
                            continue;
                        } else {
                            for (int i = 0; i < claveCandidata.size(); i++) {
                                if (((HashSet) entry.getValue()).contains(claveCandidata.toArray()[i])) {
                                    System.out.println("Caso 1: Se elimina " + claveCandidata.toArray()[i]);
                                    claveCandidata.remove((String) claveCandidata.toArray()[i]);
                                }
                            }
                            values.addAll((HashSet) entry.getValue());
                        }


                    } else {
                        for (int i = 0; i < ((HashSet) entry.getKey()).toArray().length; i++) {
                            if (!values.contains((String) ((HashSet) entry.getKey()).toArray()[i])) {
                                claveCandidata.add((String) ((HashSet) entry.getKey()).toArray()[i]);
                                values.add((String) ((HashSet) entry.getKey()).toArray()[i]);
                            }
                        }
                        values.addAll((HashSet) entry.getValue());
                    }
                }
                for (int i = 0; i < claveCandidata.toArray().length; i++) {
                    if (((HashSet) entry.getValue()).contains(claveCandidata.toArray()[i])) {
                        System.out.println("Caso 2: Se elimina " + claveCandidata.toArray()[i]);
                        claveCandidata.remove((String) claveCandidata.toArray()[i]);
                    }
                }
            }
            System.out.println("Actualmente " + claveCandidata + " determina a " + values);
            cont++;
        }
        System.out.println("Clave Candidata es " + claveCandidata + " determina a " + values);
        ccs.add(claveCandidata);
        txtClave.setText(claveCandidata.toString());
        System.out.println("Claves Candidatas:");
        for (int i = 0; i < ccs.size(); i++) {
            System.out.println(ccs.toArray()[i]);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAtr;
    private javax.swing.JButton btnAddAtributo;
    private javax.swing.JButton btnAddDeterminado;
    private javax.swing.JButton btnAddDeterminadoEsquema;
    private javax.swing.JButton btnAddDeterminante;
    private javax.swing.JButton btnAddDeterminanteEsquema;
    private javax.swing.JButton btnAgregarDF;
    private javax.swing.JButton btnClaves;
    private javax.swing.JButton btnClearDeterminantes;
    private javax.swing.JButton btnLimpiarDeterminados;
    private javax.swing.JButton btnNormalizar;
    private javax.swing.JComboBox cmbAtr;
    private javax.swing.JComboBox cmbDeterminadoEsquema;
    private javax.swing.JComboBox cmbDeterminados;
    private javax.swing.JComboBox cmbDeterminanteEsquema;
    private javax.swing.JComboBox cmbDeterminantes;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList lstAtributos;
    private javax.swing.JList lstDF;
    private javax.swing.JList lstDependencias;
    private javax.swing.JList lstDeterminadoEsquema;
    private javax.swing.JList lstDeterminados;
    private javax.swing.JList lstDeterminanteEsquema;
    private javax.swing.JList lstDeterminantes;
    private javax.swing.JList lstEsquemas;
    private javax.swing.JTextField txtAtributo;
    private javax.swing.JTextField txtClave;
    private javax.swing.JTextField txtEsquema;
    private javax.swing.JTextField txtNombreAtributo;
    private javax.swing.JTextField txtNombreEsquema;
    private javax.swing.JTextField txtPK;
    // End of variables declaration//GEN-END:variables
    ArrayList<String> atributos = new ArrayList();
    Hashtable<HashSet, HashSet> m = new Hashtable<>();
    HashSet<String> atributosEsquema = new HashSet();
    HashSet<String> pkActual = new HashSet();
    HashSet<Esquema> esquemas = new HashSet();
    Hashtable<HashSet, HashSet> DFactual = new Hashtable();
}
